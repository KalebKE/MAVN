/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mavn.simulation.view.controlBar;

import javax.swing.AbstractButton;
import mavn.algorithm.properties.view.state.SimulationPropertiesStateInterface;

/**
 *
 * @author Kaleb
 */
public class PropertiesControlBar extends javax.swing.JPanel
{

    private SimulationPropertiesStateInterface simulationState;

    /**
     * Creates new form PropertiesControlBarl
     */
    public PropertiesControlBar(SimulationPropertiesStateInterface simulationState)
    {
        initComponents();
        this.simulationState = simulationState;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        diagnosticSimulationCheckBox = new javax.swing.JCheckBox();
        pixelGridSimulationCheckBox = new javax.swing.JCheckBox();
        monteCarloSimulationCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(170, 170, 170)), "Distribution", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Roboto Cn", 1, 12), new java.awt.Color(238, 238, 238))); // NOI18N
        setMaximumSize(new java.awt.Dimension(300, 69));
        setMinimumSize(new java.awt.Dimension(282, 69));
        setLayout(new java.awt.GridBagLayout());

        diagnosticSimulationCheckBox.setFont(new java.awt.Font("Roboto Cn", 0, 12)); // NOI18N
        diagnosticSimulationCheckBox.setForeground(new java.awt.Color(238, 238, 238));
        diagnosticSimulationCheckBox.setText("Single");
        diagnosticSimulationCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                diagnosticSimulationCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.333;
        gridBagConstraints.weighty = 1.0;
        add(diagnosticSimulationCheckBox, gridBagConstraints);

        pixelGridSimulationCheckBox.setFont(new java.awt.Font("Roboto Cn", 0, 12)); // NOI18N
        pixelGridSimulationCheckBox.setForeground(new java.awt.Color(238, 238, 238));
        pixelGridSimulationCheckBox.setText("Grid");
        pixelGridSimulationCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                pixelGridSimulationCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.333;
        gridBagConstraints.weighty = 1.0;
        add(pixelGridSimulationCheckBox, gridBagConstraints);

        monteCarloSimulationCheckBox.setFont(new java.awt.Font("Roboto Cn", 0, 12)); // NOI18N
        monteCarloSimulationCheckBox.setForeground(new java.awt.Color(238, 238, 238));
        monteCarloSimulationCheckBox.setSelected(true);
        monteCarloSimulationCheckBox.setText("Random");
        monteCarloSimulationCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                monteCarloSimulationCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.333;
        gridBagConstraints.weighty = 1.0;
        add(monteCarloSimulationCheckBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void diagnosticSimulationCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_diagnosticSimulationCheckBoxActionPerformed
    {//GEN-HEADEREND:event_diagnosticSimulationCheckBoxActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        boolean selected = abstractButton.getModel().isSelected();
        if (selected)
        {
            this.simulationState.onDiagnosticSimulation();

            this.pixelGridSimulationCheckBox.setSelected(false);
            this.monteCarloSimulationCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_diagnosticSimulationCheckBoxActionPerformed

    private void pixelGridSimulationCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pixelGridSimulationCheckBoxActionPerformed
    {//GEN-HEADEREND:event_pixelGridSimulationCheckBoxActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        boolean selected = abstractButton.getModel().isSelected();
        if (selected)
        {
            this.simulationState.onPixelGridSimulation();

            this.diagnosticSimulationCheckBox.setSelected(false);
            this.monteCarloSimulationCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_pixelGridSimulationCheckBoxActionPerformed

    private void monteCarloSimulationCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_monteCarloSimulationCheckBoxActionPerformed
    {//GEN-HEADEREND:event_monteCarloSimulationCheckBoxActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        boolean selected = abstractButton.getModel().isSelected();
        if (selected)
        {
            this.simulationState.onMonteCarloSimulation();

            this.pixelGridSimulationCheckBox.setSelected(false);
            this.diagnosticSimulationCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_monteCarloSimulationCheckBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox diagnosticSimulationCheckBox;
    private javax.swing.JCheckBox monteCarloSimulationCheckBox;
    private javax.swing.JCheckBox pixelGridSimulationCheckBox;
    // End of variables declaration//GEN-END:variables
}
