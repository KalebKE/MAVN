/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ResultsFrame.java
 *
 * Created on Feb 3, 2012, 11:34:37 AM
 */
package mavn.view;

import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import mavn.state.properties.PropertiesState;
import mavn.state.properties.PropertiesStateInterface;

/**
 *
 * @author Kaleb
 */
public class PropertiesFrame extends javax.swing.JFrame
{

    private PropertiesStateInterface propertiesState;
    private ControlFrame view;

    /** Creates new form ResultsFrame */
    public PropertiesFrame(ControlFrame view)
    {
        initComponents();
        this.view = view;
        this.propertiesState = new PropertiesState(this);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.pack();
        this.setVisible(true);
    }

    public JCheckBox getDartGunCheckBox()
    {
        return dartGunCheckBox;
    }

    public JLabel getDartGunLabel()
    {
        return dartGunLabel;
    }

    public JRadioButton getGridRadio()
    {
        return gridRadio;
    }

    public JLabel getInputsLabel()
    {
        return inputsLabel;
    }

    public JRadioButton getNormalRadio()
    {
        return normalRadio;
    }

    public JLabel getNumDartsLabel()
    {
        return numDartsLabel;
    }

    public JSpinner getNumDartsSpinner()
    {
        return numDartsSpinner;
    }

    public JLabel getPropertiesHeaderLabel()
    {
        return propertiesHeaderLabel;
    }

    public JRadioButton getRandomSeedRadio()
    {
        return randomSeedRadio;
    }

    public JLabel getSeedLabel()
    {
        return seedLabel;
    }

    public JSpinner getSeedSpinner()
    {
        return seedSpinner;
    }

    public JLabel getSeedSpinnerLabel()
    {
        return seedSpinnerLabel;
    }

    public JRadioButton getSpecifiedSeedRadio()
    {
        return specifiedSeedRadio;
    }

    public JCheckBox getTargetCheckBox()
    {
        return targetCheckBox;
    }

    public JRadioButton getUniformRadio()
    {
        return uniformRadio;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        uniformRadio = new javax.swing.JRadioButton();
        normalRadio = new javax.swing.JRadioButton();
        gridRadio = new javax.swing.JRadioButton();
        targetCheckBox = new javax.swing.JCheckBox();
        dartGunCheckBox = new javax.swing.JCheckBox();
        propertiesHeaderLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        inputsLabel = new javax.swing.JLabel();
        dartGunLabel = new javax.swing.JLabel();
        randomSeedRadio = new javax.swing.JRadioButton();
        specifiedSeedRadio = new javax.swing.JRadioButton();
        seedLabel = new javax.swing.JLabel();
        seedSpinner = new javax.swing.JSpinner();
        seedSpinnerLabel = new javax.swing.JLabel();
        numDartsLabel = new javax.swing.JLabel();
        numDartsSpinner = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        uniformRadio.setSelected(true);
        uniformRadio.setText("Uniform Distribution");
        uniformRadio.setEnabled(false);
        uniformRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniformRadioActionPerformed(evt);
            }
        });

        normalRadio.setText("Normal Distribution");
        normalRadio.setEnabled(false);
        normalRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalRadioActionPerformed(evt);
            }
        });

        gridRadio.setText("Grid Distribution");
        gridRadio.setEnabled(false);
        gridRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridRadioActionPerformed(evt);
            }
        });

        targetCheckBox.setSelected(true);
        targetCheckBox.setText("Use Target Matrix");
        targetCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetCheckBoxActionPerformed(evt);
            }
        });

        dartGunCheckBox.setText("Use Dart Gun");
        dartGunCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dartGunCheckBoxActionPerformed(evt);
            }
        });

        propertiesHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        propertiesHeaderLabel.setText("Set MAVN Simulation Run Properties:");

        inputsLabel.setText("What inputs should the simulation use?");

        dartGunLabel.setText("What Dart Gun distribution is desired?");
        dartGunLabel.setEnabled(false);

        randomSeedRadio.setSelected(true);
        randomSeedRadio.setText("Use Random Seed");
        randomSeedRadio.setEnabled(false);
        randomSeedRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomSeedRadioActionPerformed(evt);
            }
        });

        specifiedSeedRadio.setText("Use Specified Seed");
        specifiedSeedRadio.setEnabled(false);
        specifiedSeedRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specifiedSeedRadioActionPerformed(evt);
            }
        });

        seedLabel.setText("Do you want a seeded distribution?");
        seedLabel.setEnabled(false);

        seedSpinner.setEnabled(false);

        seedSpinnerLabel.setText("Desired Seed:");
        seedSpinnerLabel.setEnabled(false);

        numDartsLabel.setText("How many darts should be used?");
        numDartsLabel.setEnabled(false);

        numDartsSpinner.setEnabled(false);

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(propertiesHeaderLabel)
                .addContainerGap(171, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputsLabel)
                    .addComponent(dartGunLabel)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(seedSpinnerLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(seedSpinner))
                        .addComponent(seedLabel, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(numDartsLabel))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(randomSeedRadio)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gridRadio)
                            .addComponent(normalRadio)
                            .addComponent(uniformRadio))
                        .addContainerGap(67, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dartGunCheckBox)
                            .addComponent(targetCheckBox))
                        .addGap(75, 75, 75))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(numDartsSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(specifiedSeedRadio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(acceptButton)
                .addGap(51, 51, 51)
                .addComponent(cancelButton)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {acceptButton, cancelButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(propertiesHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetCheckBox)
                    .addComponent(inputsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dartGunCheckBox)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dartGunLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(uniformRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(normalRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(gridRadio)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomSeedRadio)
                    .addComponent(seedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(specifiedSeedRadio)
                    .addComponent(seedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seedSpinnerLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numDartsLabel)
                    .addComponent(numDartsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(cancelButton))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_formPropertyChange
    {//GEN-HEADEREND:event_formPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_formPropertyChange

    private void targetCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_targetCheckBoxActionPerformed
    {//GEN-HEADEREND:event_targetCheckBoxActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        boolean selected = abstractButton.getModel().isSelected();
        if (selected)
        {
            propertiesState.useTargets();
        }
    }//GEN-LAST:event_targetCheckBoxActionPerformed

    private void dartGunCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_dartGunCheckBoxActionPerformed
    {//GEN-HEADEREND:event_dartGunCheckBoxActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        boolean selected = abstractButton.getModel().isSelected();
        if (selected)
        {
            propertiesState.useDarts();
        }
    }//GEN-LAST:event_dartGunCheckBoxActionPerformed

    private void uniformRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_uniformRadioActionPerformed
    {//GEN-HEADEREND:event_uniformRadioActionPerformed
        if (uniformRadio.isSelected())
        {
            propertiesState.uniformDistribution();
        }
    }//GEN-LAST:event_uniformRadioActionPerformed

    private void normalRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_normalRadioActionPerformed
    {//GEN-HEADEREND:event_normalRadioActionPerformed
        if (normalRadio.isSelected())
        {
            propertiesState.normalDistribution();
        }
    }//GEN-LAST:event_normalRadioActionPerformed

    private void gridRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_gridRadioActionPerformed
    {//GEN-HEADEREND:event_gridRadioActionPerformed
        if (gridRadio.isSelected())
        {
            propertiesState.gridDistribution();
        }
    }//GEN-LAST:event_gridRadioActionPerformed

    private void randomSeedRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_randomSeedRadioActionPerformed
    {//GEN-HEADEREND:event_randomSeedRadioActionPerformed
        if (randomSeedRadio.isSelected())
        {
            propertiesState.useRandomSeed();
        }
    }//GEN-LAST:event_randomSeedRadioActionPerformed

    private void specifiedSeedRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_specifiedSeedRadioActionPerformed
    {//GEN-HEADEREND:event_specifiedSeedRadioActionPerformed
        if (specifiedSeedRadio.isSelected())
        {
            propertiesState.useSpecifiedSeed();
        }
    }//GEN-LAST:event_specifiedSeedRadioActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_acceptButtonActionPerformed
    {//GEN-HEADEREND:event_acceptButtonActionPerformed
        if (propertiesState.isDart())
        {
            view.setDartGunState(true);
            view.setSeed((Double) propertiesState.getSeedModel().getValue());
            view.setNumDarts((Double) propertiesState.getDartModel().getValue());
        }

        if (propertiesState.isTarget())
        {
            view.setDartGunState(false);
        }

        if (propertiesState.isGridDistribution())
        {
            view.setGridDistribution(true);
            view.setUniformDistribution(false);
            view.setNormalDistribution(false);
        }

        if (propertiesState.isNormalDistribution())
        {
            view.setUniformDistribution(false);
            view.setGridDistribution(false);
            view.setNormalDistribution(true);
        }

        if (propertiesState.isUniformDistribution())
        {
            view.setUniformDistribution(true);
            view.setGridDistribution(false);
            view.setNormalDistribution(false);
        }

        view.getResultsState().propertiesLoaded();
        this.dispose();
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox dartGunCheckBox;
    private javax.swing.JLabel dartGunLabel;
    private javax.swing.JRadioButton gridRadio;
    private javax.swing.JLabel inputsLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton normalRadio;
    private javax.swing.JLabel numDartsLabel;
    private javax.swing.JSpinner numDartsSpinner;
    private javax.swing.JLabel propertiesHeaderLabel;
    private javax.swing.JRadioButton randomSeedRadio;
    private javax.swing.JLabel seedLabel;
    private javax.swing.JSpinner seedSpinner;
    private javax.swing.JLabel seedSpinnerLabel;
    private javax.swing.JRadioButton specifiedSeedRadio;
    private javax.swing.JCheckBox targetCheckBox;
    private javax.swing.JRadioButton uniformRadio;
    // End of variables declaration//GEN-END:variables
}
