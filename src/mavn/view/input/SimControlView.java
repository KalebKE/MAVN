/*
MavnView -- a class within the Machine Artificial Vision Network(Machine Artificial Vision Network).
Copyright (C) 2012, Kaleb Kircher, Dennis Steele.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

/*
 * Main.java
 *
 * Created on Nov 2, 2011, 2:43:32 PM
 */
package mavn.view.input;

import file.open.controller.directory.OpenSpreadsheetDirectoryController;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.print.PrinterJob;
import java.io.File;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingWorker;
import mavn.factory.AbstractSimulationFactory;
import mavn.globals.Globals;
import util.components.InfiniteProgressPanel;

/**
 * The main View for the Mavn application.
 * @author Kaleb
 */
public class SimControlView extends JFrame
{

    private InfiniteProgressPanel progressPanel;
    // The main Controller for the application.
    private AbstractSimulationFactory controller;
    private SwingWorker algorithmWorker;

    /** Creates new form Main */
    public SimControlView(final AbstractSimulationFactory controller)
    {
        initComponents();
        
        this.controller = controller;

        progressPanel = new InfiniteProgressPanel();
        this.setGlassPane(progressPanel);

        this.setExtendedState(Frame.MAXIMIZED_BOTH);

        fileMenu.add(new AbstractAction("Make Image")
        {

            @Override
            public void actionPerformed(ActionEvent e)
            {
                JFileChooser chooser = new JFileChooser();
                int option = chooser.showSaveDialog(SimControlView.this);
                if (option == JFileChooser.APPROVE_OPTION)
                {
                    File file = chooser.getSelectedFile();
                    controller.getNetworkPanel().getNetworkView().writeJPEGImage(file);
                }
            }
        });
        fileMenu.add(new AbstractAction("Print")
        {

            @Override
            public void actionPerformed(ActionEvent e)
            {
                PrinterJob printJob = PrinterJob.getPrinterJob();
                printJob.setPrintable(controller.getNetworkPanel().getNetworkView());
                if (printJob.printDialog())
                {
                    try
                    {
                        printJob.print();
                    } catch (Exception ex)
                    {
                        ex.printStackTrace();
                    }
                }
            }
        });     
    }

    public void setModelView()
    {
        mainScrollPane.setViewportView(controller.getModelPanel());
        this.validate();
    }

    public void setNetworkView()
    {
        mainScrollPane.setViewportView(controller.getNetworkPanel());
        this.validate();
    }

    public void runSimulation()
    {
        algorithmWorker = new SwingWorker<Void, Void>()
        {

            @Override
            public Void doInBackground()
            {
                controller.getModelResultControllers().get(Globals.RESULTS_CONTROLLER).runSimulation();
                //progressPanel.start();
                return null;
            }

            @Override
            public void done()
            {
                //progressPanel.stop();
            }
        };

        algorithmWorker.execute();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        importModelMenuItem = new javax.swing.JMenuItem();
        saveModelMenuItem = new javax.swing.JMenuItem();
        viewNetworkMenu = new javax.swing.JMenu();
        viewNetworkMenuItem = new javax.swing.JMenuItem();
        viewModelMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        mainScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        mainScrollPane.setMaximumSize(new java.awt.Dimension(1200, 1000));
        mainScrollPane.setPreferredSize(new java.awt.Dimension(1050, 1002));

        fileMenu.setText("File");

        importModelMenuItem.setText("Import Model");
        importModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importModelMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importModelMenuItem);

        saveModelMenuItem.setText("Save Model");
        saveModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveModelMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveModelMenuItem);

        jMenuBar1.add(fileMenu);

        viewNetworkMenu.setText("Views");

        viewNetworkMenuItem.setText("Network");
        viewNetworkMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewNetworkMenuItemActionPerformed(evt);
            }
        });
        viewNetworkMenu.add(viewNetworkMenuItem);

        viewModelMenuItem.setText("Model");
        viewModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewModelMenuItemActionPerformed(evt);
            }
        });
        viewNetworkMenu.add(viewModelMenuItem);

        jMenuBar1.add(viewNetworkMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1136, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1013, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importModelMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importModelMenuItemActionPerformed
    {//GEN-HEADEREND:event_importModelMenuItemActionPerformed
        OpenSpreadsheetDirectoryController importModel = new OpenSpreadsheetDirectoryController(controller.getModelInputFileControllersList());
        importModel.getDirectoryChooser();
    }//GEN-LAST:event_importModelMenuItemActionPerformed
    private void saveModelMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveModelMenuItemActionPerformed
    {//GEN-HEADEREND:event_saveModelMenuItemActionPerformed
        
    }//GEN-LAST:event_saveModelMenuItemActionPerformed

    private void formPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_formPropertyChange
    {//GEN-HEADEREND:event_formPropertyChange
        if (evt.getPropertyName().equals("propertiesChanged"))
        {
           
        }
    }//GEN-LAST:event_formPropertyChange

    private void viewNetworkMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_viewNetworkMenuItemActionPerformed
    {//GEN-HEADEREND:event_viewNetworkMenuItemActionPerformed
        controller.getView().setNetworkView();
        mainScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        mainScrollPane.validate();
        mainScrollPane.updateUI();
    }//GEN-LAST:event_viewNetworkMenuItemActionPerformed

    private void viewModelMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_viewModelMenuItemActionPerformed
    {//GEN-HEADEREND:event_viewModelMenuItemActionPerformed
        controller.getView().setModelView();
        mainScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        mainScrollPane.validate();
        mainScrollPane.updateUI();
    }//GEN-LAST:event_viewModelMenuItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem importModelMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JMenuItem saveModelMenuItem;
    private javax.swing.JMenuItem viewModelMenuItem;
    private javax.swing.JMenu viewNetworkMenu;
    private javax.swing.JMenuItem viewNetworkMenuItem;
    // End of variables declaration//GEN-END:variables
}
